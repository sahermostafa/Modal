{"version":3,"sources":["components/modal.jpg","components/Modal.js","globalStyles.js","App.js","serviceWorker.js","index.js"],"names":["Background","styled","div","ModalWrapper","ModalImg","img","ModalContent","CloseModalButton","MdClose","Modal","showModal","setShowModal","modalRef","useRef","animation","useSpring","config","duration","opacity","transform","keyPress","useCallback","e","key","console","log","useEffect","document","addEventListener","removeEventListener","onClick","current","target","ref","style","src","imges","alt","prev","GlobalStyle","createGlobalStyle","Container","Button","button","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0MAAe,MAA0B,kC,OCMnCA,EAAaC,IAAOC,IAAV,0LAUVC,EAAeF,IAAOC,IAAV,sQAaZE,EAAWH,IAAOI,IAAV,mHAORC,EAAeL,IAAOC,IAAV,wTAoBZK,EAAmBN,YAAOO,IAAPP,CAAH,qKAWTQ,EAAQ,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC3BC,EAAWC,mBAEXC,EAAYC,oBAAU,CAC1BC,OAAQ,CACNC,SAAU,KAEZC,QAASR,EAAY,EAAI,EACzBS,UAAWT,EAAS,uCAShBU,EAAWC,uBACf,SAAAC,GACgB,WAAVA,EAAEC,KAAoBb,IACxBC,GAAa,GACba,QAAQC,IAAI,gBAGhB,CAACd,EAAcD,IAWjB,OARAgB,qBACE,WAEE,OADAC,SAASC,iBAAiB,UAAWR,GAC9B,kBAAMO,SAASE,oBAAoB,UAAWT,MAEvD,CAACA,IAID,mCACGV,EACC,cAACV,EAAD,CAAY8B,QA3BC,SAAAR,GACbV,EAASmB,UAAYT,EAAEU,QACzBrB,GAAa,IAyBsBsB,IAAKrB,EAAtC,SACE,cAAC,WAASV,IAAV,CAAcgC,MAAOpB,EAArB,SACE,eAACX,EAAD,CAAcO,UAAWA,EAAzB,UACE,cAACN,EAAD,CAAU+B,IAAKC,EAAOC,IAAI,WAC1B,eAAC/B,EAAD,WACE,gDACA,yEACA,iDAEF,cAACC,EAAD,CACE,aAAW,cACXuB,QAAS,kBAAMnB,GAAa,SAAA2B,GAAI,OAAKA,eAK3C,QCvHGC,EAAcC,YAAH,kKCGlBC,EAAYxC,IAAOC,IAAV,oHAOTwC,EAASzC,IAAO0C,OAAV,gMA6BGC,MAlBf,WACE,MAAkCC,oBAAS,GAA3C,mBAAOnC,EAAP,KAAkBC,EAAlB,KAMA,OACE,mCACE,eAAC8B,EAAD,WACE,cAACC,EAAD,CAAQZ,QAPI,WAChBnB,GAAa,SAAA2B,GAAI,OAAKA,MAMlB,yBACA,cAAC,EAAD,CAAO5B,UAAWA,EAAWC,aAAcA,IAC3C,cAAC4B,EAAD,UCvBYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAAS2B,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.50d50b0f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/modal.508cd51b.jpg\";","import React, { useRef, useEffect, useCallback } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport styled from 'styled-components';\nimport { MdClose } from 'react-icons/md';\nimport imges from './modal.jpg';\n\nconst Background = styled.div`\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ModalWrapper = styled.div`\n  width: 800px;\n  height: 500px;\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n  background: #fff;\n  color: #000;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  position: relative;\n  z-index: 10;\n  border-radius: 10px;\n`;\n\nconst ModalImg = styled.img`\n  width: 100%;\n  height: 100%;\n  border-radius: 10px 0 0 10px;\n  background: #000;\n`;\n\nconst ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  line-height: 1.8;\n  color: #141414;\n\n  p {\n    margin-bottom: 1rem;\n  }\n\n  button {\n    padding: 10px 24px;\n    background: #141414;\n    color: #fff;\n    border: none;\n  }\n`;\n\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  z-index: 10;\n`;\n\nexport const Modal = ({ showModal, setShowModal }) => {\n  const modalRef = useRef();\n\n  const animation = useSpring({\n    config: {\n      duration: 250\n    },\n    opacity: showModal ? 1 : 0,\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`\n  });\n\n  const closeModal = e => {\n    if (modalRef.current === e.target) {\n      setShowModal(false);\n    }\n  };\n\n  const keyPress = useCallback(\n    e => {\n      if (e.key === 'Escape' && showModal) {\n        setShowModal(false);\n        console.log('I pressed');\n      }\n    },\n    [setShowModal, showModal]\n  );\n\n  useEffect(\n    () => {\n      document.addEventListener('keydown', keyPress);\n      return () => document.removeEventListener('keydown', keyPress);\n    },\n    [keyPress]\n  );\n\n  return (\n    <>\n      {showModal ? (\n        <Background onClick={closeModal} ref={modalRef}>\n          <animated.div style={animation}>\n            <ModalWrapper showModal={showModal}>\n              <ModalImg src={imges} alt='camera' />\n              <ModalContent>\n                <h1>Are you ready?</h1>\n                <p>Get exclusive access to our next launch.</p>\n                <button>Join Now</button>\n              </ModalContent>\n              <CloseModalButton\n                aria-label='Close modal'\n                onClick={() => setShowModal(prev => !prev)}\n              />\n            </ModalWrapper>\n          </animated.div>\n        </Background>\n      ) : null}\n    </>\n  );\n};\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    background:gray;\n    box-sizing: border-box;\n    margin:0;\n    padding: 0;\n    font-family: 'Arial', sans-serif;\n  }\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Modal } from './components/Modal';\nimport { GlobalStyle } from './globalStyles';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nconst Button = styled.button`\n  min-width: 100px;\n  padding: 16px 32px;\n  border-radius: 4px;\n  border: none;\n  background: #141414;\n  color: #fff;\n  font-size: 24px;\n  cursor: pointer;\n`;\n\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n\n  const openModal = () => {\n    setShowModal(prev => !prev);\n  };\n\n  return (\n    <>\n      <Container>\n        <Button onClick={openModal}>I'm a modal</Button>\n        <Modal showModal={showModal} setShowModal={setShowModal} />\n        <GlobalStyle />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}